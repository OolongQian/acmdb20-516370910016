package simpledb;

import java.io.File;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    
    private JoinPredicate p;
    private DbIterator child1, child2;
    private Tuple tuple1 = null;
    
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
	    this.p = p;
	    this.child1 = child1;
	    this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
	    // some code goes here
	    return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
	    TupleDesc tupleDesc1 = child1.getTupleDesc();
	    int field1 = p.getField1();
	    return tupleDesc1.getFieldName(field1);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
	    TupleDesc tupleDesc2 = child2.getTupleDesc();
	    int field2 = p.getField2();
	    return tupleDesc2.getFieldName(field2);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
	    return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
	    super.open();
	    tuple1 = null;
	    child1.open();
	    child2.open();
    }

    public void close() {
        // some code goes here
	    super.close();
	    tuple1 = null;
	    child1.close();
	    child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
	    super.close();
	    super.open();
	    tuple1 = null;
	    child1.rewind();
	    child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

	    // keep trying, until predicate holds or we run out of tuples.
	    while (true) {

		    // initialize tuple1.
		    if (tuple1 == null) {
			    // if child1 is empty.
			    if (!child1.hasNext())
				    return null;
			    tuple1 = child1.next();
		    }
		
			// iterate through tuple2.
		    if (child2.hasNext()) {
			    Tuple tuple2 = child2.next();
			    if (p.filter(tuple1, tuple2)) {
				    return tupleMerge(tuple1, tuple2);
			    }
		    } else {
		        // even when tuple2 finishes, no satisfiable tuples.
			    
			    // if child1 also finishes, no next tuple.
			    if (!child1.hasNext()) {
				    return null;
			    }
			    else {
			        // else, increment tuple1 and continue.
				    tuple1 = child1.next();
				    child2.rewind();
				    continue;
			    }
		    }
	    }
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
	    DbIterator[] children = new DbIterator[2];
	    children[0] = child1;
	    children[1] = child2;
	    return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
	    assert children.length == 2;
	    child1 = children[0];
	    child2 = children[1];
    }
    
    private Tuple tupleMerge(Tuple t1, Tuple t2) {
        Tuple tJoin = new Tuple(getTupleDesc());
        int i = 0;
        
        for (Iterator<Field> iter = t1.fields(); iter.hasNext(); ++i)
	        tJoin.setField(i, iter.next());
	
	    for (Iterator<Field> iter = t2.fields(); iter.hasNext(); ++i)
		    tJoin.setField(i, iter.next());
	    
	    return tJoin;
    }
}
